\BOOKMARK [1][-]{section.1}{Tuesday, May 8, 2018}{}% 1
\BOOKMARK [2][-]{subsection.1.1}{What is an operating system?}{section.1}% 2
\BOOKMARK [2][-]{subsection.1.2}{Storage Hierarchy}{section.1}% 3
\BOOKMARK [2][-]{subsection.1.3}{Storage Structure}{section.1}% 4
\BOOKMARK [2][-]{subsection.1.4}{Caching}{section.1}% 5
\BOOKMARK [2][-]{subsection.1.5}{Concurrency}{section.1}% 6
\BOOKMARK [2][-]{subsection.1.6}{C Programming and Memory}{section.1}% 7
\BOOKMARK [2][-]{subsection.1.7}{The Process Concept}{section.1}% 8
\BOOKMARK [2][-]{subsection.1.8}{Process Data Structures}{section.1}% 9
\BOOKMARK [2][-]{subsection.1.9}{Process Control Block}{section.1}% 10
\BOOKMARK [2][-]{subsection.1.10}{Process state and state changes}{section.1}% 11
\BOOKMARK [2][-]{subsection.1.11}{State Queues}{section.1}% 12
\BOOKMARK [2][-]{subsection.1.12}{PCBs and State Queues}{section.1}% 13
\BOOKMARK [2][-]{subsection.1.13}{Context Switch}{section.1}% 14
\BOOKMARK [2][-]{subsection.1.14}{Operations on Processes}{section.1}% 15
\BOOKMARK [3][-]{subsubsection.1.14.1}{Process Creation}{subsection.1.14}% 16
\BOOKMARK [3][-]{subsubsection.1.14.2}{Process Termination}{subsection.1.14}% 17
\BOOKMARK [2][-]{subsection.1.15}{Process Creation}{section.1}% 18
\BOOKMARK [3][-]{subsubsection.1.15.1}{Unix}{subsection.1.15}% 19
\BOOKMARK [3][-]{subsubsection.1.15.2}{Why fork?}{subsection.1.15}% 20
\BOOKMARK [3][-]{subsubsection.1.15.3}{Unix Shells}{subsection.1.15}% 21
\BOOKMARK [2][-]{subsection.1.16}{Example: Concurrent Web Server}{section.1}% 22
\BOOKMARK [2][-]{subsection.1.17}{Parallel Programming}{section.1}% 23
\BOOKMARK [2][-]{subsection.1.18}{Example: Concurrent Servers}{section.1}% 24
\BOOKMARK [2][-]{subsection.1.19}{Rethinking Processes}{section.1}% 25
\BOOKMARK [2][-]{subsection.1.20}{Threads}{section.1}% 26
\BOOKMARK [2][-]{subsection.1.21}{Thread Interface}{section.1}% 27
\BOOKMARK [2][-]{subsection.1.22}{Thread Scheduling}{section.1}% 28
\BOOKMARK [2][-]{subsection.1.23}{Threads Summary}{section.1}% 29
\BOOKMARK [2][-]{subsection.1.24}{Cooperating Processes}{section.1}% 30
\BOOKMARK [2][-]{subsection.1.25}{Interprocess Communication}{section.1}% 31
\BOOKMARK [1][-]{section.2}{Tuesday, May 15, 2018}{}% 32
\BOOKMARK [2][-]{subsection.2.1}{Bootstrapping}{section.2}% 33
\BOOKMARK [2][-]{subsection.2.2}{Operating System Startup}{section.2}% 34
\BOOKMARK [2][-]{subsection.2.3}{Memory Layout}{section.2}% 35
\BOOKMARK [2][-]{subsection.2.4}{From Program to Process}{section.2}% 36
\BOOKMARK [2][-]{subsection.2.5}{Unix Shells}{section.2}% 37
\BOOKMARK [2][-]{subsection.2.6}{Requesting OS Services}{section.2}% 38
\BOOKMARK [2][-]{subsection.2.7}{Boundary Crossings}{section.2}% 39
\BOOKMARK [2][-]{subsection.2.8}{System Calls for Process Management}{section.2}% 40
\BOOKMARK [2][-]{subsection.2.9}{System Calls for File Manamgement}{section.2}% 41
\BOOKMARK [2][-]{subsection.2.10}{Systems Call Example}{section.2}% 42
\BOOKMARK [2][-]{subsection.2.11}{System Call Interface}{section.2}% 43
\BOOKMARK [2][-]{subsection.2.12}{System Call Operation}{section.2}% 44
\BOOKMARK [2][-]{subsection.2.13}{Introduction to Synchronization}{section.2}% 45
\BOOKMARK [3][-]{subsubsection.2.13.1}{Motivating Example}{subsection.2.13}% 46
\BOOKMARK [3][-]{subsubsection.2.13.2}{Interlevced Schedules}{subsection.2.13}% 47
\BOOKMARK [3][-]{subsubsection.2.13.3}{What went wrong}{subsection.2.13}% 48
\BOOKMARK [3][-]{subsubsection.2.13.4}{Revisiting the Example}{subsection.2.13}% 49
\BOOKMARK [3][-]{subsubsection.2.13.5}{Mutal Exclusion}{subsection.2.13}% 50
\BOOKMARK [3][-]{subsubsection.2.13.6}{What program data is shared between threads?}{subsection.2.13}% 51
\BOOKMARK [3][-]{subsubsection.2.13.7}{The Critical Section Problem}{subsection.2.13}% 52
\BOOKMARK [3][-]{subsubsection.2.13.8}{Critical Section Requirements}{subsection.2.13}% 53
\BOOKMARK [3][-]{subsubsection.2.13.9}{Some Assumptions and Notation}{subsection.2.13}% 54
\BOOKMARK [3][-]{subsubsection.2.13.10}{2-Thread Solutions: First Attempt}{subsection.2.13}% 55
\BOOKMARK [3][-]{subsubsection.2.13.11}{2-Thread Solutions: Second Attempt}{subsection.2.13}% 56
\BOOKMARK [3][-]{subsubsection.2.13.12}{2-Thread Solutions: Third Attempt}{subsection.2.13}% 57
\BOOKMARK [3][-]{subsubsection.2.13.13}{Synchronization Hardware}{subsection.2.13}% 58
\BOOKMARK [3][-]{subsubsection.2.13.14}{Atomic Instructions: Test-and-Set Lock \(TSL\)}{subsection.2.13}% 59
\BOOKMARK [1][-]{section.3}{Tuesday, May 22, 2018}{}% 60
\BOOKMARK [2][-]{subsection.3.1}{Producer and Consumer}{section.3}% 61
\BOOKMARK [2][-]{subsection.3.2}{Semaphores}{section.3}% 62
\BOOKMARK [3][-]{subsubsection.3.2.1}{Types of Semaphores}{subsection.3.2}% 63
\BOOKMARK [2][-]{subsection.3.3}{The reader, writer problem}{section.3}% 64
\BOOKMARK [2][-]{subsection.3.4}{Monitors}{section.3}% 65
\BOOKMARK [3][-]{subsubsection.3.4.1}{Bounded Buffer Problem}{subsection.3.4}% 66
\BOOKMARK [2][-]{subsection.3.5}{Process Scheduling}{section.3}% 67
\BOOKMARK [3][-]{subsubsection.3.5.1}{What happens on a dispatch /context switch?}{subsection.3.5}% 68
\BOOKMARK [3][-]{subsubsection.3.5.2}{Process Life Cycle}{subsection.3.5}% 69
\BOOKMARK [3][-]{subsubsection.3.5.3}{What is processor scheduling?}{subsection.3.5}% 70
\BOOKMARK [3][-]{subsubsection.3.5.4}{Scheduling Goals}{subsection.3.5}% 71
\BOOKMARK [3][-]{subsubsection.3.5.5}{Types of Scheduling}{subsection.3.5}% 72
\BOOKMARK [1][-]{section.4}{Tuesday, May 29, 2018}{}% 73
\BOOKMARK [2][-]{subsection.4.1}{Problem: Dining Philosophers}{section.4}% 74
\BOOKMARK [2][-]{subsection.4.2}{Scheduling Algorithms}{section.4}% 75
\BOOKMARK [3][-]{subsubsection.4.2.1}{FCFS}{subsection.4.2}% 76
\BOOKMARK [3][-]{subsubsection.4.2.2}{SJF}{subsection.4.2}% 77
\BOOKMARK [3][-]{subsubsection.4.2.3}{Round Robin}{subsection.4.2}% 78
\BOOKMARK [3][-]{subsubsection.4.2.4}{Mars Rover Pathfinder Bug Example}{subsection.4.2}% 79
\BOOKMARK [2][-]{subsection.4.3}{What do real systems do?}{section.4}% 80
\BOOKMARK [3][-]{subsubsection.4.3.1}{Multi-Level Queue Scheduling}{subsection.4.3}% 81
\BOOKMARK [3][-]{subsubsection.4.3.2}{Feedback Scheduling}{subsection.4.3}% 82
\BOOKMARK [3][-]{subsubsection.4.3.3}{Timesharing in Linux 2.8}{subsection.4.3}% 83
\BOOKMARK [1][-]{section.5}{Tuesday, June 5, 2018}{}% 84
\BOOKMARK [2][-]{subsection.5.1}{Memory Management}{section.5}% 85
\BOOKMARK [3][-]{subsubsection.5.1.1}{Requirements}{subsection.5.1}% 86
\BOOKMARK [3][-]{subsubsection.5.1.2}{Meeting the Requirements}{subsection.5.1}% 87
\BOOKMARK [3][-]{subsubsection.5.1.3}{Address Binding}{subsection.5.1}% 88
\BOOKMARK [3][-]{subsubsection.5.1.4}{When are addresses bound?}{subsection.5.1}% 89
\BOOKMARK [3][-]{subsubsection.5.1.5}{Address Translation: Logical and physical addresses}{subsection.5.1}% 90
\BOOKMARK [3][-]{subsubsection.5.1.6}{Fixed Partitioning}{subsection.5.1}% 91
\BOOKMARK [3][-]{subsubsection.5.1.7}{Dynamic Partitioning}{subsection.5.1}% 92
\BOOKMARK [3][-]{subsubsection.5.1.8}{Heap Manamgement}{subsection.5.1}% 93
\BOOKMARK [3][-]{subsubsection.5.1.9}{Tracking Memory Allocation}{subsection.5.1}% 94
\BOOKMARK [3][-]{subsubsection.5.1.10}{Placement Algorithms}{subsection.5.1}% 95
\BOOKMARK [3][-]{subsubsection.5.1.11}{Problems with Partitioning}{subsection.5.1}% 96
\BOOKMARK [3][-]{subsubsection.5.1.12}{Paging}{subsection.5.1}% 97
\BOOKMARK [3][-]{subsubsection.5.1.13}{Address Translation}{subsection.5.1}% 98
\BOOKMARK [3][-]{subsubsection.5.1.14}{Address Translation for Paging}{subsection.5.1}% 99
\BOOKMARK [3][-]{subsubsection.5.1.15}{Page Table Entries \(PTE\)}{subsection.5.1}% 100
\BOOKMARK [3][-]{subsubsection.5.1.16}{Page Lookups}{subsection.5.1}% 101
\BOOKMARK [3][-]{subsubsection.5.1.17}{Translation Lookaside Buffer}{subsection.5.1}% 102
\BOOKMARK [3][-]{subsubsection.5.1.18}{Managing TLBs}{subsection.5.1}% 103
\BOOKMARK [1][-]{section.6}{Tuesday, June 12, 2018}{}% 104
\BOOKMARK [2][-]{subsection.6.1}{Paging}{section.6}% 105
\BOOKMARK [2][-]{subsection.6.2}{Page Table Management}{section.6}% 106
\BOOKMARK [3][-]{subsubsection.6.2.1}{Multilevel Page Tables \(MLPT\)}{subsection.6.2}% 107
\BOOKMARK [2][-]{subsection.6.3}{Inverted Page Tables}{section.6}% 108
\BOOKMARK [2][-]{subsection.6.4}{Efficient Translations}{section.6}% 109
\BOOKMARK [2][-]{subsection.6.5}{Page allocation and eviction}{section.6}% 110
\BOOKMARK [2][-]{subsection.6.6}{Page Faults}{section.6}% 111
\BOOKMARK [2][-]{subsection.6.7}{Policy Decisions}{section.6}% 112
\BOOKMARK [2][-]{subsection.6.8}{Fetch Policy}{section.6}% 113
\BOOKMARK [3][-]{subsubsection.6.8.1}{Demand Paging}{subsection.6.8}% 114
\BOOKMARK [3][-]{subsubsection.6.8.2}{Prepaging \(aka Prefetching\)}{subsection.6.8}% 115
\BOOKMARK [2][-]{subsection.6.9}{Placement Policy}{section.6}% 116
\BOOKMARK [2][-]{subsection.6.10}{Replacement Policy}{section.6}% 117
\BOOKMARK [3][-]{subsubsection.6.10.1}{Evicting the best page}{subsection.6.10}% 118
\BOOKMARK [3][-]{subsubsection.6.10.2}{Belady's Algorithm \(aka OPT aka MIN\)}{subsection.6.10}% 119
\BOOKMARK [3][-]{subsubsection.6.10.3}{What are possible replacement algorithms?}{subsection.6.10}% 120
\BOOKMARK [3][-]{subsubsection.6.10.4}{Not-Recently-Used \(NRU\)}{subsection.6.10}% 121
\BOOKMARK [3][-]{subsubsection.6.10.5}{First-In-First-Out \(FIFO\)}{subsection.6.10}% 122
\BOOKMARK [3][-]{subsubsection.6.10.6}{Second-Chance}{subsection.6.10}% 123
\BOOKMARK [3][-]{subsubsection.6.10.7}{Second-Chance Implementaiton}{subsection.6.10}% 124
\BOOKMARK [2][-]{subsection.6.11}{Eviction Algorithms}{section.6}% 125
\BOOKMARK [3][-]{subsubsection.6.11.1}{Least Recently Used \(LRU\)}{subsection.6.11}% 126
\BOOKMARK [3][-]{subsubsection.6.11.2}{Counting-based replacement}{subsection.6.11}% 127
\BOOKMARK [3][-]{subsubsection.6.11.3}{Comparing Replacement Algorithms}{subsection.6.11}% 128
\BOOKMARK [3][-]{subsubsection.6.11.4}{Fixed vs. Variable Space}{subsection.6.11}% 129
\BOOKMARK [3][-]{subsubsection.6.11.5}{Working Set Model}{subsection.6.11}% 130
\BOOKMARK [3][-]{subsubsection.6.11.6}{Working Set Problems}{subsection.6.11}% 131
\BOOKMARK [2][-]{subsection.6.12}{Page Fault Frequency}{section.6}% 132
\BOOKMARK [3][-]{subsubsection.6.12.1}{Thrashing}{subsection.6.12}% 133
\BOOKMARK [3][-]{subsubsection.6.12.2}{Windows XP Paging Policy}{subsection.6.12}% 134
\BOOKMARK [3][-]{subsubsection.6.12.3}{Linux Paging Policy}{subsection.6.12}% 135
\BOOKMARK [1][-]{section.7}{Tuesday, July 3, 2018}{}% 136
\BOOKMARK [2][-]{subsection.7.1}{File Systems}{section.7}% 137
\BOOKMARK [2][-]{subsection.7.2}{File Management Systems}{section.7}% 138
\BOOKMARK [2][-]{subsection.7.3}{File Concept}{section.7}% 139
\BOOKMARK [2][-]{subsection.7.4}{File Types}{section.7}% 140
\BOOKMARK [3][-]{subsubsection.7.4.1}{File Operations}{subsection.7.4}% 141
\BOOKMARK [2][-]{subsection.7.5}{File Access Methods}{section.7}% 142
\BOOKMARK [2][-]{subsection.7.6}{Handling operations on files}{section.7}% 143
\BOOKMARK [2][-]{subsection.7.7}{Shared open files}{section.7}% 144
\BOOKMARK [2][-]{subsection.7.8}{Directories}{section.7}% 145
\BOOKMARK [3][-]{subsubsection.7.8.1}{What is a directory at the OS level?}{subsection.7.8}% 146
\BOOKMARK [3][-]{subsubsection.7.8.2}{Operations on Directories}{subsection.7.8}% 147
\BOOKMARK [2][-]{subsection.7.9}{Path Name Translation}{section.7}% 148
\BOOKMARK [2][-]{subsection.7.10}{File System Implementation}{section.7}% 149
\BOOKMARK [3][-]{subsubsection.7.10.1}{Directory Implementation}{subsection.7.10}% 150
\BOOKMARK [2][-]{subsection.7.11}{Disk Layout Strategies}{section.7}% 151
\BOOKMARK [3][-]{subsubsection.7.11.1}{Contiguous Allocation}{subsection.7.11}% 152
\BOOKMARK [3][-]{subsubsection.7.11.2}{Linked Allocation}{subsection.7.11}% 153
\BOOKMARK [3][-]{subsubsection.7.11.3}{Indexed Allocation: Unix Inodes}{subsection.7.11}% 154
\BOOKMARK [3][-]{subsubsection.7.11.4}{Unix Inodes and Path Search}{subsection.7.11}% 155
\BOOKMARK [3][-]{subsubsection.7.11.5}{Possible Directory Implementations}{subsection.7.11}% 156
\BOOKMARK [3][-]{subsubsection.7.11.6}{File Links}{subsection.7.11}% 157
\BOOKMARK [3][-]{subsubsection.7.11.7}{Issues with Acyclic Graphs}{subsection.7.11}% 158
\BOOKMARK [2][-]{subsection.7.12}{File Sharing}{section.7}% 159
\BOOKMARK [3][-]{subsubsection.7.12.1}{Protection}{subsection.7.12}% 160
\BOOKMARK [3][-]{subsubsection.7.12.2}{Types of Access}{subsection.7.12}% 161
\BOOKMARK [3][-]{subsubsection.7.12.3}{Representing Protection}{subsection.7.12}% 162
\BOOKMARK [3][-]{subsubsection.7.12.4}{ACLS and Capabilities}{subsection.7.12}% 163
\BOOKMARK [3][-]{subsubsection.7.12.5}{File Buffer Cache}{subsection.7.12}% 164
\BOOKMARK [3][-]{subsubsection.7.12.6}{Caching Writes}{subsection.7.12}% 165
\BOOKMARK [3][-]{subsubsection.7.12.7}{Read Ahead}{subsection.7.12}% 166
\BOOKMARK [1][-]{section.8}{Tuesday, July 10, 2018}{}% 167
\BOOKMARK [2][-]{subsection.8.1}{File System Implementation}{section.8}% 168
\BOOKMARK [2][-]{subsection.8.2}{Disk Components}{section.8}% 169
\BOOKMARK [2][-]{subsection.8.3}{Disk service time components}{section.8}% 170
\BOOKMARK [2][-]{subsection.8.4}{Mixing workloads can be tricky}{section.8}% 171
\BOOKMARK [2][-]{subsection.8.5}{Components of disk access time}{section.8}% 172
\BOOKMARK [3][-]{subsubsection.8.5.1}{Disks are Slow}{subsection.8.5}% 173
\BOOKMARK [2][-]{subsection.8.6}{OS design principles}{section.8}% 174
\BOOKMARK [2][-]{subsection.8.7}{Disks are Messy}{section.8}% 175
\BOOKMARK [2][-]{subsection.8.8}{OS and Disk interaction}{section.8}% 176
\BOOKMARK [2][-]{subsection.8.9}{Logical Block Addressing}{section.8}% 177
\BOOKMARK [2][-]{subsection.8.10}{Disk Scheduling}{section.8}% 178
\BOOKMARK [3][-]{subsubsection.8.10.1}{Back to files and directories}{subsection.8.10}% 179
\BOOKMARK [3][-]{subsubsection.8.10.2}{Disk Layout Strategies}{subsection.8.10}% 180
\BOOKMARK [3][-]{subsubsection.8.10.3}{Indexed Allocation: Unix Inodes}{subsection.8.10}% 181
\BOOKMARK [3][-]{subsubsection.8.10.4}{Unix Inodes and Path Search}{subsection.8.10}% 182
\BOOKMARK [2][-]{subsection.8.11}{File System Implementation}{section.8}% 183
\BOOKMARK [3][-]{subsubsection.8.11.1}{Original Unix File System}{subsection.8.11}% 184
\BOOKMARK [3][-]{subsubsection.8.11.2}{Data and Inode Placement}{subsection.8.11}% 185
\BOOKMARK [3][-]{subsubsection.8.11.3}{Fast File System \(FFS\)}{subsection.8.11}% 186
\BOOKMARK [3][-]{subsubsection.8.11.4}{Cylinder Groups}{subsection.8.11}% 187
\BOOKMARK [3][-]{subsubsection.8.11.5}{Space Allocation in Cylinder Groups}{subsection.8.11}% 188
\BOOKMARK [3][-]{subsubsection.8.11.6}{More FFS Solutions}{subsection.8.11}% 189
\BOOKMARK [2][-]{subsection.8.12}{The Linux Second Extended File System \(EXT2\)}{section.8}% 190
\BOOKMARK [2][-]{subsection.8.13}{Fast File System: Consistency Issues}{section.8}% 191
\BOOKMARK [3][-]{subsubsection.8.13.1}{Fast File System Observations}{subsection.8.13}% 192
\BOOKMARK [2][-]{subsection.8.14}{Log Structured File System \(LSF\)}{section.8}% 193
\BOOKMARK [3][-]{subsubsection.8.14.1}{LFS Reads}{subsection.8.14}% 194
\BOOKMARK [2][-]{subsection.8.15}{NTFS \(Windows\)}{section.8}% 195
\BOOKMARK [3][-]{subsubsection.8.15.1}{Master File Table Record}{subsection.8.15}% 196
\BOOKMARK [3][-]{subsubsection.8.15.2}{Master File Table Record for a Small Directory}{subsection.8.15}% 197
\BOOKMARK [2][-]{subsection.8.16}{Better I/O performance through parallelism}{section.8}% 198
